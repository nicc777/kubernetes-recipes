---
apiVersion: v1
kind: Namespace
metadata:
  name: example002
  labels:
    name: example002
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fastapi-serviceaccount
  namespace: example002
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fastapi-clusterrole
  namespace: example002
rules:
- apiGroups: ["", "metrics.k8s.io"]
  resources: ["namespaces"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fastapi-global-clusterrolebinding
  namespace: example002
subjects:
- kind: ServiceAccount
  name: fastapi-serviceaccount
  namespace: example002
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
roleRef: 
  kind: ClusterRole
  name: fastapi-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fastapi-code-dm
  namespace: example002
data:
  app: |
    import sys
    import os
    import traceback
    import uvicorn
    from fastapi import FastAPI
    import kr8s.asyncio
    import copy

    class KubeApi:
      def __init__(self):
        self.api = None

    kube_api = KubeApi()
    app = FastAPI()

    @app.get("/")
    async def root():
        return {"message": "ok"}

    @app.get('/namespaces')
    async def namespaces():
      namespaces = list()
      result = dict()
      try:
        for namespace in await kr8s.asyncio.get('namespaces', api=kube_api.api):
          namespace_data = dict()
          namespace_raw_data = copy.deepcopy(namespace.raw)
          if 'metadata' in namespace_raw_data:
            if 'creationTimestamp' in namespace_raw_data['metadata']:
              namespace_data['CreateTimestamp'] = namespace_raw_data['metadata']['creationTimestamp']
            if 'labels' in namespace_raw_data['metadata']:
              namespace_data['Labels'] = namespace_raw_data['metadata']['labels']
          namespaces.append({"Name": namespace.metadata.name, "Metadata": namespace_data,})
        result = {"Namespaces": namespaces}
      except:
        print('EXCEPTION: {}'.format(traceback.format_exc()))
      return result

    if __name__ == '__main__':
      kube_config_file = os.getenv('KUBECONFIG', None)
      if kube_config_file is not None:
        kube_api.api = kr8s.api(kubeconfig=kube_config_file)
      uvicorn.run(app, host="0.0.0.0", port=8080, workers=1)
      print("DONE")
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-test
  namespace: example002
  labels:
    app: fastapi-test
spec:
  replicas: 1
  selector:
    matchLabels:
      name: fastapi-test
  template:
    metadata:
      labels:
        name: fastapi-test
    spec:
      serviceAccountName: fastapi-serviceaccount
      containers:
      - name: fastapi-test
        image: ghcr.io/nicc777/container-python4aws:v3.12.1-1
        volumeMounts:
        - name: fastapi-code-vol
          mountPath: "/tmp"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        command: ["/bin/sh"]
        args: ["-c", "python3 /tmp/app.py"]
      volumes:
      - name: fastapi-code-vol
        configMap:
          name: fastapi-code-dm
          items:
          - key: app
            path: app.py
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-test-service
  namespace: example002
spec:
  selector:
    name: fastapi-test
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: http-ingress-2
  namespace: example002
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /example002(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: fastapi-test-service
            port:
              number: 8080